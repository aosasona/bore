// Code generated by go-enum DO NOT EDIT.

package events

import (
	"errors"
	"fmt"
)

const (
	// ActionCreateItem is a Action of type create_item.
	ActionCreateItem Action = "create_item"
	// ActionDeleteItem is a Action of type delete_item.
	ActionDeleteItem Action = "delete_item"
	// ActionCreateCollection is a Action of type create_collection.
	ActionCreateCollection Action = "create_collection"
	// ActionDeleteCollection is a Action of type delete_collection.
	ActionDeleteCollection Action = "delete_collection"
)

var ErrInvalidAction = errors.New("not a valid Action")

// String implements the Stringer interface.
func (x Action) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Action) IsValid() bool {
	_, err := ParseAction(string(x))
	return err == nil
}

var _ActionValue = map[string]Action{
	"create_item":       ActionCreateItem,
	"delete_item":       ActionDeleteItem,
	"create_collection": ActionCreateCollection,
	"delete_collection": ActionDeleteCollection,
}

// ParseAction attempts to convert a string to a Action.
func ParseAction(name string) (Action, error) {
	if x, ok := _ActionValue[name]; ok {
		return x, nil
	}
	return Action(""), fmt.Errorf("%s is %w", name, ErrInvalidAction)
}

// MarshalText implements the text marshaller method.
func (x Action) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Action) UnmarshalText(text []byte) error {
	tmp, err := ParseAction(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *Action) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}
