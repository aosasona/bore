// Code generated by go-enum DO NOT EDIT.

package events

import (
	"errors"
	"fmt"
)

const (
	// TypeCreateItem is a Type of type create_item.
	TypeCreateItem Type = "create_item"
	// TypeDeleteItem is a Type of type delete_item.
	TypeDeleteItem Type = "delete_item"
	// TypeCreateCollection is a Type of type create_collection.
	TypeCreateCollection Type = "create_collection"
	// TypeDeleteCollection is a Type of type delete_collection.
	TypeDeleteCollection Type = "delete_collection"
)

var ErrInvalidType = errors.New("not a valid Type")

// String implements the Stringer interface.
func (x Type) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x Type) IsValid() bool {
	_, err := ParseType(string(x))
	return err == nil
}

var _TypeValue = map[string]Type{
	"create_item":       TypeCreateItem,
	"delete_item":       TypeDeleteItem,
	"create_collection": TypeCreateCollection,
	"delete_collection": TypeDeleteCollection,
}

// ParseType attempts to convert a string to a Type.
func ParseType(name string) (Type, error) {
	if x, ok := _TypeValue[name]; ok {
		return x, nil
	}
	return Type(""), fmt.Errorf("%s is %w", name, ErrInvalidType)
}

// MarshalText implements the text marshaller method.
func (x Type) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *Type) UnmarshalText(text []byte) error {
	tmp, err := ParseType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *Type) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}
