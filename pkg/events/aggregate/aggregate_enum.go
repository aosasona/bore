// Code generated by go-enum DO NOT EDIT.

package aggregate

import (
	"errors"
	"fmt"
)

const (
	// AggregateTypeItem is a AggregateType of type item.
	AggregateTypeItem AggregateType = "item"
	// AggregateTypeCollection is a AggregateType of type collection.
	AggregateTypeCollection AggregateType = "collection"
)

var ErrInvalidAggregateType = errors.New("not a valid AggregateType")

// String implements the Stringer interface.
func (x AggregateType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x AggregateType) IsValid() bool {
	_, err := ParseAggregateType(string(x))
	return err == nil
}

var _AggregateTypeValue = map[string]AggregateType{
	"item":       AggregateTypeItem,
	"collection": AggregateTypeCollection,
}

// ParseAggregateType attempts to convert a string to a AggregateType.
func ParseAggregateType(name string) (AggregateType, error) {
	if x, ok := _AggregateTypeValue[name]; ok {
		return x, nil
	}
	return AggregateType(""), fmt.Errorf("%s is %w", name, ErrInvalidAggregateType)
}

// MarshalText implements the text marshaller method.
func (x AggregateType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *AggregateType) UnmarshalText(text []byte) error {
	tmp, err := ParseAggregateType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *AggregateType) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}
