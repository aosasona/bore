// Code generated by go-enum DO NOT EDIT.

package mimetype

import (
	"errors"
	"fmt"
)

const (
	// MimeTypeApplicationJson is a MimeType of type application/json.
	MimeTypeApplicationJson MimeType = "application/json"
	// MimeTypeTextPlain is a MimeType of type text/plain.
	MimeTypeTextPlain MimeType = "text/plain"
)

var ErrInvalidMimeType = errors.New("not a valid MimeType")

// String implements the Stringer interface.
func (x MimeType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x MimeType) IsValid() bool {
	_, err := ParseMimeType(string(x))
	return err == nil
}

var _MimeTypeValue = map[string]MimeType{
	"application/json": MimeTypeApplicationJson,
	"text/plain":       MimeTypeTextPlain,
}

// ParseMimeType attempts to convert a string to a MimeType.
func ParseMimeType(name string) (MimeType, error) {
	if x, ok := _MimeTypeValue[name]; ok {
		return x, nil
	}
	return MimeType(""), fmt.Errorf("%s is %w", name, ErrInvalidMimeType)
}

// MarshalText implements the text marshaller method.
func (x MimeType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *MimeType) UnmarshalText(text []byte) error {
	tmp, err := ParseMimeType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}

// AppendText appends the textual representation of itself to the end of b
// (allocating a larger slice if necessary) and returns the updated slice.
//
// Implementations must not retain b, nor mutate any bytes within b[:len(b)].
func (x *MimeType) AppendText(b []byte) ([]byte, error) {
	return append(b, x.String()...), nil
}
